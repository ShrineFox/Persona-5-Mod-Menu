import("PartyFlags.msg");

void PartyFlagsMenu()
{
    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        int selection = DescriptionMenu(Title_PartyFlags, Options_PartyFlags);
        switch (selection)
        {
            case -1:
                return;
            case 0:
                TogglePartyMemberUnlocked();
                break;
            case 1:
                TogglePartyEditing();
                break;
            case 2:
                SetNavigator();
                break;
            case 3:
                TogglePartyFollowers();
                break;
            case 4:
                ToggleBatonPass();
                break;
            case 5:
                ActivateBlackMaskAkechi();
                break;
            case 6:
                ToggleYoshizawaName();
                break;
            case 7:
                ToggleShowTimes();
                break;
        }
    }
}

void ToggleShowTimes()
{
    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        SetConfidantNames();
        int selection = NameMenu(Title_Showtime, Options_Showtime);
        if (selection == -1)
            return;

        if (selection == 7)
        {
            // Joker/Kasumi
            int jokersumi = Flag.Section3 + 278;
            ToggleFlag(jokersumi, false);
        }
        else
        {
            int flagId = Flag.Section3 + 261 + selection;
            ToggleFlag(flagId, false);
        }
    }
}

void ToggleBatonPass()
{
    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        SetConfidantNames();
        int selection = NameMenu(Title_Units, Options_Units);
        if (selection == -1)
            return;
        int rank = NameMenu(Title_BatonRank, Options_BatonRank);
        if (rank == -1)
            return;
        SET_COUNT(288 + selection, rank);
    }
}

void TogglePartyMemberUnlocked()
{
    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        SetConfidantNames();
        int selection = NameMenu(Title_Units, Options_UnitsNoJoker);
        if (selection == -1)
            return;

        int flg_pty = Flag.Section4 + 48 + selection;
        // Toggle partial party member unlock
        ToggleFlag(flg_pty, false);
        FlagStatus(flg_pty);
        // Toggle full party member unlock
        ToggleFlag(flg_pty + 148, false);
        FlagStatus(flg_pty + 148);
    }
}

void TogglePartyEditing()
{
    bool enable = false;
    if (SystemMenu(Message_EnablePartyEdit, Options_OnOff) == 1)
        enable = true;

    for (int i = 0; i < 8; i++)
    {
        // Don't disable triangle menu, confidant or request menus
        if (i != 2 && i != 3 && i != 4)
        {
            if (enable)
                BIT_ON(Flag.Section4 + 3 + i);
            else
                BIT_OFF(Flag.Section4 + 3 + i);
        }
    }

    FlagStatus(Flag.Section4 + 3);
}

void SetNavigator()
{
    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        SetConfidantNames();
        int selection = NameMenu(Title_UnitsNavi, Options_UnitsNavi);
        switch (selection)
        {
            case -1:
                return;
            case 0: // Morgana
                BIT_ON(Flag.Section3 + 12);
                BIT_OFF(Flag.Section3 + 13);
                /* Royal Start */
                BIT_OFF(Flag.Section3 + 279);
                /* Royal End */
                break;
            case 1: // Futaba
                BIT_OFF(Flag.Section3 + 12);
                BIT_ON(Flag.Section3 + 13);
                /* Royal Start */
                BIT_OFF(Flag.Section3 + 279);
                /* Royal End */
                break;
            case 2: // Akechi
                BIT_OFF(Flag.Section3 + 12);
                BIT_OFF(Flag.Section3 + 13);
                /* Royal Start */
                BIT_ON(Flag.Section3 + 279);
                /* Royal End */
                break;
        }
    }
}

void TogglePartyFollowers()
{
    BIT_ON(Flag.Section2 + 65);
    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        SetConfidantNames();
        int selection = NameMenu(Title_Units, Options_UnitsNoJoker);
        if (selection == -1)
            return;

        int flgId = Flag.Section2 + 18 + selection;
        ToggleFlag(flgId, false);
        FlagStatus(flgId);
    }
}

void ActivateBlackMaskAkechi()
{
    /* Royal Start */
    if (BIT_CHK(Flag.Section4 + 272))
    {
        // Revert Black Mask Akechi Appearance
        int selection = SystemMenu(Message_BlackMaskActive, Options_YesNo);
        if (selection == 0) // Yes
            BIT_OFF(Flag.Section4 + 272);
    }
    else
    {
        // Update To Black Mask Appearance
        BIT_ON(Flag.Section4 + 272);
        int selection = SystemMenu(Message_BlackMaskInactive, Options_YesNo);
        if (selection == 0) // Yes
        {
            SET_PERSONA_LV(10, 240, 75);
            REMOVE_PERSONA_SKILL(10, 240, 253);
            REMOVE_PERSONA_SKILL(10, 240, 58);
            ADD_PERSONA_SKILL(10, 240, 213);
            ADD_PERSONA_SKILL(10, 240, 56);
            ADD_PERSONA_SKILL(10, 240, 59);
            ADD_PERSONA_SKILL(10, 240, 302);
            ADD_PERSONA_SKILL(10, 240, 979);
            ADD_PERSONA_SKILL(10, 240, 857);

            if (CHANGE_EQUIP_ITEM(10, (0x00008000 + 255)) == -2)
            {
                SET_EQUIP(10, 4, (0x00008000 + 255));
            }
            else
            {
                SET_ITEM_NUM((0x00008000 + 253), 0);
                SET_ITEM_NUM((0x00008000 + 254), 0);
            }
            SET_EQUIP(10, 0, (0 + 251));
            SET_EQUIP(10, 1, (0x1000 + 11));

            if (GET_PLAYER_LV(9, 1) <= 74)
            {
                SET_PERSONA_LV(9, 209, 75);
            }
            else
            {
                SET_PERSONA_LV(9, 209, GET_PLAYER_LV(9, 1));
            }
            PERSONA_EVOLUTION(9);
            REMOVE_PERSONA_SKILL(9, 239, 71);
            REMOVE_PERSONA_SKILL(9, 239, 202);
            REMOVE_PERSONA_SKILL(9, 239, 55);
            REMOVE_PERSONA_SKILL(9, 239, 65);
            REMOVE_PERSONA_SKILL(9, 239, 51);
            REMOVE_PERSONA_SKILL(9, 239, 61);
            REMOVE_PERSONA_SKILL(9, 239, 985);
            REMOVE_PERSONA_SKILL(9, 239, 56);
            REMOVE_PERSONA_SKILL(9, 239, 66);
            REMOVE_PERSONA_SKILL(9, 239, 840);
            REMOVE_PERSONA_SKILL(9, 239, 311);
            REMOVE_PERSONA_SKILL(9, 239, 53);
            REMOVE_PERSONA_SKILL(9, 239, 63);
            REMOVE_PERSONA_SKILL(9, 239, 72);
            REMOVE_PERSONA_SKILL(9, 239, 348);
            REMOVE_PERSONA_SKILL(9, 239, 279);
            REMOVE_PERSONA_SKILL(9, 239, 227);
            REMOVE_PERSONA_SKILL(9, 239, 350);
            REMOVE_PERSONA_SKILL(9, 239, 351);
            REMOVE_PERSONA_SKILL(9, 239, 371);
            ADD_PERSONA_SKILL(9, 239, 279);
            ADD_PERSONA_SKILL(9, 239, 72);
            ADD_PERSONA_SKILL(9, 239, 348);
            ADD_PERSONA_SKILL(9, 239, 227);
            ADD_PERSONA_SKILL(9, 239, 66);
            ADD_PERSONA_SKILL(9, 239, 985);
            ADD_PERSONA_SKILL(9, 239, 840);
            ADD_PERSONA_SKILL(9, 239, 838);

            if (CHANGE_EQUIP_ITEM(9, (0x00008000 + 249)) == -2)
            {
                SET_EQUIP(9, 4, (0x00008000 + 249));
            }
            else
            {
                SET_ITEM_NUM((0x00008000 + 224), 0);
            }
            SET_EQUIP(9, 0, (0 + 246));
            SET_EQUIP(9, 1, (0x1000 + 12));
            SET_EQUIP(9, 2, (0x2000 + 9));
            SET_EQUIP(9, 3, (28672 + 13));
            RECOVERY_ALL();

            if (!BIT_CHK(Flag.Section4 + 14))
            {
                SET_ITEM_NUM(28672 + 24, 0);
            }
        }
    }
    /* Royal End */
}

void ToggleYoshizawaName()
{
    int flg1 = Flag.Section0 + 2121;
    ToggleFlag(flg1, false);
    int flg2 = Flag.Section0 + 2180;
    ToggleFlag(flg2, false);
}