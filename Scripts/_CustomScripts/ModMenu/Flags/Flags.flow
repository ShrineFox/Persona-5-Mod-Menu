import("Flags.msg");
import("Category/FlagCategories.flow");
import("../../Utilities/Utilities.flow");

global int range1;
global int range2;
const int flg_PauseMenu = Flag.Section0 + 320;
const int flg_ModMenu = Flag.Section4 + 5;

void FlagsMenu()
{
    SetFlagAmt();
    EnableSharePlay();

    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        int selection = DescriptionMenu(Title_Flags, Options_Flags);
        switch (selection)
        {
            case -1:
                return;
            case 0:
                ToggleBitflags_ByID();
                break;
            case 1:
                FlagCategoriesMenu();
                break;
            case 2:
                // Randomize Flags
                int chance = NumberMenu(3, Title_Percent);
                if (chance != -1)
                {
                    RandomizeFlags(chance);
                    SET_MSG_VAR(0, chance, 0);
                    SystemMessage(Message_RandomizeComplete);
                }
                break;
            case 3:
                // Print Enabled Flags
                PrintOnFlags();
                break;
            case 4:
                // Print Disabled Flags
                PrintOffFlags();
                break;
            case 5:
                // Print Count Values
                PrintCount();
                break;
        }
    }
}

void ToggleBitflags_ByID()
{
    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        int selection = DescriptionMenu(Title_ToggleByID, Options_ToggleByID);
        switch (selection)
        {
            case -1:
                return;
            case 0:
                // Set Individual Flag
                int flagId = NumberMenu(5, Title_FlagID);
                if (flagId != -1)
                {
                    ToggleFlag(flagId, false);
                    FlagStatus(flagId);
                }
                break;
            case 1:
                // Set Start Range
                range1 = NumberMenu(5, Title_RangeStart);
                CheckRange();
                break;
            case 2:
                // Set End Range
                range2 = NumberMenu(5, Title_RangeEnd);
                CheckRange();
                break;
            case 3:
                // Enable Range
                ToggleRange(0);
                break;
            case 4:
                // Disable Range
                ToggleRange(1);
                break;
            case 5:
                // Flip Range
                ToggleRange(2);
                break;
            case 6:
                // Set Count Value
                SetCount();
                break;
        }
    }
}

void RandomizeFlags(int chance)
{
    for (int i = 0; i < GET_COUNT(8); i++)
    {
        if (RND(100) <= chance)
        {
            ToggleFlag(i, false);
        }
    }
}

void CheckRange()
{
    if (range1 == -1 || range2 == -1)
        return;
    SET_MSG_VAR(0, range1, 0);
    SET_MSG_VAR(1, range2, 1);
    SystemMessage(Msg_RangeSet);
}

void PrintOnFlags()
{
    PUTS("Start Enabled Flag Dump");
    for (int i = 0; i < GET_COUNT(8); i++)
    {
        if (BIT_CHK(i))
        {
            PUT(i);
        }
    }
    PUTS("End Enabled Flag Dump");
}

void PrintOffFlags()
{
    PUTS("Start Disabled Flag Dump");
    for (int i = 0; i < GET_COUNT(8); i++)
    {
        if (!BIT_CHK(i))
        {
            PUT(i);
        }
    }
    PUTS("End Disabled Flag Dump");
}

void PrintCount()
{
	PUTS("Start Count Value Dump");
    for (int i = 0; i < 256; i++)
    {
        PUT(GET_COUNT(i));
    }
	PUTS("End Count Value Dump");
}

void SetCount()
{
    int countID = NumberMenu(3, Title_CountID);
    if (countID == -1)
        return;
    int countValue = NumberMenu(6, Title_CountValue);
    if (countValue == -1)
        return;

    SET_COUNT(countID, countValue);
    SET_MSG_VAR(0, countID, 0);
    SET_MSG_VAR(1, countValue, 0);
    SystemMessage(Msg_ConfirmCount);
}

void ToggleRange(int mode)
{
    if (range1 < 0)
        range1 = 0;
    if (range2 < 0)
        range2 = 0;
    if (range2 < GET_COUNT(8))
        range2 = GET_COUNT(8);

    SET_MSG_VAR(0, range1, 0);
    SET_MSG_VAR(1, range2, 0);

    switch (mode)
    {
        case 0:
            int enable = SystemMenu(Message_ConfirmEnableRange, Options_YesNo);
            if (!enable)
            {
                EnableRange();
                SystemMessage(Msg_RangeEnabled);
            }
            break;
        case 1:
            int disable = SystemMenu(Message_ConfirmDisableRange, Options_YesNo);
            if (!disable)
            {
                DisableRange();
                SystemMessage(Msg_RangeDisabled);
            }
            break;
        case 2:
            int flip = SystemMenu(Message_ConfirmFlipRange, Options_YesNo);
            if (!flip)
            {
                FlipRange();
                SystemMessage(Msg_RangeFlipped);
            }
            break;
    }
}

void EnableRange()
{
    for (int i = range1; i < range2; i++)
    {
        if (i != flg_PauseMenu && i != flg_ModMenu)
            BIT_ON(i);
    }
}

void DisableRange()
{
    for (int i = range1; i < range2; i++)
    {
        if (i != flg_PauseMenu && i != flg_ModMenu)
            BIT_OFF(i);
    }
}

void FlipRange()
{
    for (int i = range1; i < range2; i++)
    {
        if (i != flg_PauseMenu && i != flg_ModMenu)
        {
            if (BIT_CHK(i))
                BIT_OFF(i);
            else
                BIT_ON(i);
        }
    }
}

void EnableSharePlay()
{
    ALL_ENABLE_SHARE_PLAY();
    BIT_OFF(Flag.Section5 + 42);
}

void SetFlagAmt()
{
    /* Vanilla Start */
    SET_COUNT(8, 8960);
    /* Vanilla End */
    /* Royal Start */
    SET_COUNT(8, 12800);
    /* Royal End */
}