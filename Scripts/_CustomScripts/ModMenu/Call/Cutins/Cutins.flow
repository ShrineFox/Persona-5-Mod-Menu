import("Cutins.msg");

void CutinsMenu()
{
    SetConfidantNames();
    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        int selection = DescriptionMenu(Title_PartyCutins, Options_PartyCutins);
        switch (selection) 
        {
            case -1:
                return;
            case 0:
                CutinMenu( RyujiExpressionRight );
                break;
            case 1:
                CutinMenu( MorganaExpressionRight );
                break;
            case 2:
                CutinMenu( AnnExpressionRight );
                break;
            case 3:
                CutinMenu( YusukeExpressionRight );
                break;    
            case 4:
                CutinMenu( MakotoExpressionRight );
                break;
            case 5:
                CutinMenu( HaruExpressionRight );
                break;    
            case 6:
                CutinMenu( FutabaExpressionRight );
                break;
            case 7:
                CutinMenu( AkechiExpressionRight );
                break;    
            case 8:
                CutinMenu( GoroExpressionRight );
                break;
            case 9:
                PortraitMenu();
                break;
        }
    }
}

void CutinMenu(int msgID)
{
    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        int selection = NameMenu(Title_CutinOrientation, Options_CutinOrientation);
        if ( selection == -1 )
            return;
        Message( msgID + selection );
    }
}

void PortraitMenu()
{
    int maxSELPortraits = 5;
    /* Royal Start */
    maxSELPortraits = 6;
    /* Royal End */

    for (int i = 0; i < maxSELPortraits; i++)
    {
        MSG_WND_DSP();
        MSG(0, 0);
        int response = SEL(JokerSEL_0 + i);
        MSG_WND_CLS();
        if (response != 0)
            break;
    }
}
