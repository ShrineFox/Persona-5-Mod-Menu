import("Camera.msg");
import("../../Utilities/Utilities.flow");

void CameraMenu()
{
    while (true && !PAD_CHK_PRESS(PadButton.L2))
    {
        int selection = DescriptionMenu(Title_Camera, Options_Camera);

        switch (selection)
        {
            case -1:
                return;
            case 0:
                CameraPosition();
                break;
            case 1:
                CameraFOVZoom();
                break;
            case 2:
                CameraUnlock();
                break;
            case 3:
                CameraLock();
                break;
            case 4:
                CAMERA_SHAKE_STOP();
                break;
        }
    }
}

void CameraPosition()
{
    DetectController();
    if (!controller)
        return;

    TransformCamera();

    // Velocity to add per frame
    const float ADD_VELOCITY_PER_PRESS = 3f;

    float velocity_translate = 0f;
    float velocity_rot_x = 0f;
    float velocity_rot_y = 0f;
    float velocity_rot_z = 0f;
    int runs = 0;

    // Get current camera rotation
    GetCameraRotation();
    CameraLock();

    // Wait for all buttons to be released
    while (PAD_CHK_PRESS(PadButton.Any)) { SYNC(); }

    // Stop executing when Circle button is pressed
    while (!PAD_CHK_PRESS(PadButton.Circle))
    {
        // Bring velocity closer to zero
        ++runs;
        float multiplier = 1f;
        if (runs > 5)
        {
            multiplier = 1f;
            runs = 0;
            velocity_rot_x /= 1.5f;
            velocity_rot_y /= 1.5f;
            velocity_rot_z /= 1.5f;
            velocity_translate /= 2f;
        }

        // Multiply velocity
        if (PAD_CHK_PRESS(PadButton.Cross))
            multiplier *= 3f;
        if (PAD_CHK_PRESS(PadButton.Triangle))
            multiplier *= 5f;
        if (PAD_CHK_PRESS(PadButton.Square))
            multiplier /= 15f;

        // Rotate camera up/down/left/right with d-pad (pitch/yaw)
        if (PAD_CHK_PRESS(PadButton.Up) || ANALOG_ASTICK_CHECK(1, AnalogStick.Up, 0))
            velocity_rot_x += ADD_VELOCITY_PER_PRESS * multiplier;
        if (PAD_CHK_PRESS(PadButton.Down) || ANALOG_ASTICK_CHECK(1, AnalogStick.Down, 0))
            velocity_rot_x -= ADD_VELOCITY_PER_PRESS * multiplier;
        if (PAD_CHK_PRESS(PadButton.Left) || ANALOG_ASTICK_CHECK(1, AnalogStick.Left, 0))
            velocity_rot_y += ADD_VELOCITY_PER_PRESS * multiplier;
        if (PAD_CHK_PRESS(PadButton.Right) || ANALOG_ASTICK_CHECK(1, AnalogStick.Right, 0))
            velocity_rot_y -= ADD_VELOCITY_PER_PRESS * multiplier;

        // tilt camera left/right (roll)
        if (PAD_CHK_PRESS(PadButton.R1))
            velocity_rot_z -= ADD_VELOCITY_PER_PRESS * multiplier;
        if (PAD_CHK_PRESS(PadButton.L1))
            velocity_rot_z += ADD_VELOCITY_PER_PRESS * multiplier;

        // Rotate in direction of velocity
        camRot_X += velocity_rot_x;
        camRot_Y += velocity_rot_y;
        camRot_Z += velocity_rot_z;
        // Limit the vertical rotation to prevent flipping
        if (DegreesToRadians(camRot_Z) > 90.0f) camRot_Z = RadiansToDegrees(90.0f);
        if (DegreesToRadians(camRot_Z) < -90.0f) camRot_Z = RadiansToDegrees(-90.0f);
        RotateCamera();

        // Translate in direction camera is facing
        if (PAD_CHK_PRESS(PadButton.R2))
            velocity_translate -= ADD_VELOCITY_PER_PRESS * multiplier;
        if (PAD_CHK_PRESS(PadButton.L2))
            velocity_translate += ADD_VELOCITY_PER_PRESS * multiplier;
        TranslateCamera(velocity_translate);

        SYNC();
    }

    PrintCameraCoords();
}

void CameraFOVZoom()
{
    DetectController();
    if (!controller)
        return;

    CameraLock();

    const float ADD_VELOCITY_PER_PRESS = 3f;
    float velocity_fov = 0f;
    float velocity_zoom = 0f;
    float fov = FLD_CAMERA_GET_FOVY();
    int zoom = 1;
    int runs = 0;

    // Stop executing when Circle button is pressed
    while (!PAD_CHK_PRESS(PadButton.Circle))
    {
        // Bring velocity closer to zero
        ++runs;
        float multiplier = 2f;
        if (runs > 5)
        {
            multiplier = 1f;
            runs = 0;
            velocity_fov /= 2f;
            velocity_zoom /= 2f;
        }

        // Multiply velocity
        if (PAD_CHK_PRESS(PadButton.Cross))
            multiplier *= 2f;
        if (PAD_CHK_PRESS(PadButton.Triangle))
            multiplier *= 3f;
        // Divide velocity
        if (PAD_CHK_PRESS(PadButton.Square))
            multiplier /= 2f;

        // Camera position north/east/south/west speed
        if (PAD_CHK_TRIG(PadButton.Up))
            velocity_zoom += ADD_VELOCITY_PER_PRESS * multiplier;
        if (PAD_CHK_TRIG(PadButton.Down))
            velocity_zoom -= ADD_VELOCITY_PER_PRESS * multiplier;
        if (PAD_CHK_TRIG(PadButton.Right))
            velocity_fov += ADD_VELOCITY_PER_PRESS * multiplier;
        if (PAD_CHK_TRIG(PadButton.Left))
            velocity_fov -= ADD_VELOCITY_PER_PRESS * multiplier;

        fov += velocity_fov;
        zoom += velocity_zoom;

        FLD_CAMERA_SET_FOVY(fov);
        FLD_CAMERA_ZOOM(zoom);
        SYNC();
    }
}

void RotateCamera()
{
    float qX = 0f;
    float qY = 0f;
    float qZ = 0f;
    float qW = 0f;
    EulerToQuatDeg(camRot_X, camRot_Y, camRot_Z, out qX, out qY, out qZ, out qW);
    FLD_CAMERA_SET_ROT(qX, qY, qZ, qW);
}

void TranslateCamera(float speed)
{
    float forward_x = 0.0f;
    float forward_y = 0.0f;
    float forward_z = 1.0f;

    float tempX = 2.0f * (FLD_CAMERA_GET_Y_ROT() * forward_z - FLD_CAMERA_GET_Z_ROT() * forward_y);
    float tempY = 2.0f * (FLD_CAMERA_GET_Z_ROT() * forward_x - FLD_CAMERA_GET_X_ROT() * forward_z);
    float tempZ = 2.0f * (FLD_CAMERA_GET_X_ROT() * forward_y - FLD_CAMERA_GET_Y_ROT() * forward_x);

    forward_x += FLD_CAMERA_GET_W_ROT() * tempX + FLD_CAMERA_GET_Y_ROT() * tempZ - FLD_CAMERA_GET_Z_ROT() * tempY;
    forward_y += FLD_CAMERA_GET_W_ROT() * tempY + FLD_CAMERA_GET_Z_ROT() * tempX - FLD_CAMERA_GET_X_ROT() * tempZ;
    forward_z += FLD_CAMERA_GET_W_ROT() * tempZ + FLD_CAMERA_GET_X_ROT() * tempY - FLD_CAMERA_GET_Y_ROT() * tempX;

    // Normalize direction vector to ensure it has a length of 1
    float length = SQRT(forward_x * forward_x + forward_y * forward_y + forward_z * forward_z);
    forward_x /= length;
    forward_y /= length;
    forward_z /= length;

    // Apply the rotation to the translation vector
    camPos_X += (forward_x * speed);
    camPos_Y += (forward_y * speed);
    camPos_Z += (forward_z * speed);

    FLD_CAMERA_SET_POS(camPos_X, camPos_Y, camPos_Z);
}

