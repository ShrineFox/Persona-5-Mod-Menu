int selDigit; // currently highlighted digit
int enterDigit; // last confirmed digit entry
bool cancelDigit; // whether user pressed back
bool endEarly; // whether user pressed select
int digit1;
int digit2;
int digit3;
int digit4;
int digit5;

int InputNumber(int digitCount)
{
    // TODO: Use something other than bitflags to check if dds already loaded!
    for (int i = 0; i < 200; i++)
    {
        BIT_OFF(i);
    }

    ShowBG();
    ResetDigits();

    // For each digit in digit count...
    for (int i = 0; i < digitCount; i++)
    {
        enterDigit = -1;
        // Have user select digit from pad
        ZealPad();

        // If end button was pressed...
        if (endEarly)
        {
            endEarly = false;
            digitCount = i;
            UpdateDigits(i);
            COMSE_PLAY(3); // chime
            break; // Exit for loop
        }
        else if (cancelDigit) // If back button was pressed...
        {
            cancelDigit = false;
            if (i == 0)
            {
                break; // Exit for loop
            }
            else
            {
                UpdateDigits(i - 1);
                i -= 2; // Go back 1 digit
            }
        }
        else
        {
            enterDigit = selDigit;
            UpdateDigits(i);
            if (i + 1 == digitCount)
                COMSE_PLAY(3); // chime
        }
    }

    HideValue();
    HideBG();

    return CalculateValue(digitCount);
}

void ResetDigits()
{
    digit1 = -1;
    digit2 = -1;
    digit3 = -1;
    digit4 = -1;
    digit5 = -1;
    selDigit = 0;
}

void UpdateDigits(int currentSlot)
{
    /* PC Start */
    HideValue();
    /* PC End */
    switch (currentSlot)
    {
        case 0:
            digit1 = enterDigit;
            digit2 = -1;
            digit3 = -1;
            digit4 = -1;
            digit5 = -1;
            break;
        case 1:
            digit2 = enterDigit;
            digit3 = -1;
            digit4 = -1;
            digit5 = -1;
            break;
        case 2:
            digit3 = enterDigit;
            digit4 = -1;
            digit5 = -1;
            break;
        case 3:
            digit4 = enterDigit;
            digit5 = -1;
            break;
        case 4:
            digit5 = enterDigit;
            break;
        default:
            break;
    }
    /* PC Start */
    ShowValue();
    /* PC End */
    SYNC();
}

int CalculateValue(int digitCount)
{
    int number = -1;

    if (digit1 == -1)
        return -1;
    if (digit2 == -1)
        digit2 = 0;
    if (digit3 == -1)
        digit3 = 0;
    if (digit4 == -1)
        digit4 = 0;
    if (digit5 == -1)
        digit5 = 0;

    switch (digitCount)
    {
        case 1:
            number = digit1;
            break;
        case 2:
            number = (digit1 * 10) + digit2;
            break;
        case 3:
            number = (digit1 * 100) + (digit2 * 10) + digit3;
            break;
        case 4:
            number = (digit1 * 1000) + (digit2 * 100) + (digit3 * 10) + digit4;
            break;
        case 5:
            number = (digit1 * 10000) + (digit2 * 1000) + (digit3 * 100) + (digit4 * 10) + digit5;
            break;
        default:
            break;
    }

    return number;
}

void ZealPad()
{
    ShowPad();
    while (PAD_CHK_PRESS(PadButton.Any)) { SYNC(); }

    bool reload = false;
    while (true)
    {
        if (reload)
        {
            ShowPad();
            reload = false;
            //while (PAD_CHK_PRESS(PadButton.Any)) { SYNC(); }
        }

        if (PAD_CHK_PRESS(PadButton.Any))
        {
            if (PAD_CHK_TRIG(PadButton.Up))
            {
                COMSE_PLAY(0);
                HidePad();
                reload = true;

                if (selDigit == 8)
                    selDigit = 0;
                else if (selDigit > 0)
                {
                    if (selDigit < 7)
                        selDigit += 3;
                    else
                        selDigit -= 6;
                }
                else
                    selDigit = 2;
            }
            else if (PAD_CHK_TRIG(PadButton.Down))
            {
                COMSE_PLAY(0);
                HidePad();
                reload = true;

                if (selDigit == 2)
                    selDigit = 0;
                else if (selDigit > 0)
                {
                    if (selDigit > 3)
                    {
                        selDigit -= 3;
                    }
                    else
                        selDigit += 6;
                }
                else
                    selDigit = 8;

            }
            else if (PAD_CHK_TRIG(PadButton.Right))
            {
                COMSE_PLAY(0);
                HidePad();
                reload = true;

                if (selDigit == 0)
                    selDigit = 3;
                else if (selDigit != 3 && selDigit != 6 && selDigit != 9)
                    selDigit += 1;
                else
                    selDigit -= 2;
            }
            else if (PAD_CHK_TRIG(PadButton.Left))
            {
                COMSE_PLAY(0);
                HidePad();
                reload = true;

                if (selDigit == 0)
                    selDigit = 1;
                else if (selDigit != 1 && selDigit != 4 && selDigit != 7)
                    selDigit -= 1;
                else
                    selDigit += 2;
            }
            else if (PAD_CHK_TRIG(PadButton.Circle))
            {
                COMSE_PLAY(1); // enter
                HidePad();
                return;
            }
            else if (PAD_CHK_TRIG(PadButton.Cross))
            {
                COMSE_PLAY(2); //back
                HidePad();
                cancelDigit = true;
                return;
            }
            else if (PAD_CHK_TRIG(PadButton.Select))
            {
                HidePad();
                endEarly = true;
                return;
            }
        }

        SYNC();
    }

    return;
}

void ShowPad()
{
    if (!BIT_CHK(selDigit))
    {
        ZEAL_TEX_READ(selDigit, selDigit);
        SYNC();
        BIT_ON(selDigit);
    }
    ZEAL_TEX_SYNC(selDigit);
    SYNC();
    WAIT(1);
    ZEAL_TEX_DISP(selDigit, 0);
    SYNC();
}

void HidePad()
{
    ZEAL_TEX_FREE(selDigit, 0);
    SYNC();
    WAIT(1);
    BIT_OFF(selDigit);
    SYNC();
}

void ShowDigit(int position, int value)
{
    if (value != -1)
    {
        // i.e. digit 4, selected 2 = 132
        int dds = 100 + (10 * position) + value;
        if (!BIT_CHK(dds))
        {
            ZEAL_TEX_READ(dds, dds);
            BIT_ON(dds);
        }
        ZEAL_TEX_SYNC(dds);
        ZEAL_TEX_DISP(dds, 0);
    }
    SYNC();
}

void HideDigit(int position, int value)
{
    if (value != -1)
    {
        // i.e. digit 4, selected 2 = 142
        int dds = 100 + (position * 10) + value;
        ZEAL_TEX_FREE(dds, 0);
        BIT_OFF(dds);
    }
    SYNC();
}

void ShowValue()
{
    /* PC Start */
    ShowDigit(1, digit1);
    ShowDigit(2, digit2);
    ShowDigit(3, digit3);
    ShowDigit(4, digit4);
    ShowDigit(5, digit5);
    /* PC End */
}

void HideValue()
{
    /* PC Start */
    HideDigit(1, digit1);
    HideDigit(2, digit2);
    HideDigit(3, digit3);
    HideDigit(4, digit4);
    HideDigit(5, digit5);
    /* PC End */
}

void ShowBG()
{
    if (!BIT_CHK(10))
    {
        ZEAL_TEX_READ(10, 10);
        BIT_ON(10);
    }
    ZEAL_TEX_SYNC(10);
    SYNC();
    ZEAL_TEX_DISP(10, 0);
    SYNC();
}

void HideBG()
{
    ZEAL_TEX_FREE(10, 0);
    BIT_OFF(10);
    SYNC();
}